{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SortType","TodoList","state","query","typeOfSort","All","isRandomize","handleChange","event","target","name","value","setState","handleClick","sortedTodos","copyTodos","props","todos","lowQuery","toLowerCase","randomize","Active","filter","todo","title","includes","completed","Completed","Error","array","copy","i","length","j","Math","floor","random","this","selectUser","actualTodos","className","onSubmit","preventDefault","placeholder","type","onChange","disabled","onClick","map","classNames","checked","readOnly","userId","id","React","Component","loadData","endpoint","a","fetch","response","ok","json","loadTodos","loadUser","CurrentUser","user","getUser","selectedUserId","prevProps","clear","email","phone","App","errorMessage","getTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c1126e7.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nenum SortType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n};\n\ntype State = {\n  query: string;\n  typeOfSort: SortType;\n  isRandomize: boolean;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    typeOfSort: SortType.All,\n    isRandomize: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'query') {\n      this.setState({\n        query: value,\n      });\n    }\n\n    if (name === 'typeOfSort') {\n      this.setState({\n        typeOfSort: value as SortType,\n      });\n\n      this.setState({\n        isRandomize: false,\n      });\n    }\n  };\n\n  handleClick = () => {\n    this.setState({\n      isRandomize: true,\n    });\n  };\n\n  sortedTodos = () => {\n    const { query, typeOfSort, isRandomize } = this.state;\n    let copyTodos = this.props.todos;\n    const lowQuery = query.toLowerCase();\n\n    if (isRandomize) {\n      copyTodos = this.randomize(copyTodos);\n    }\n\n    switch (typeOfSort) {\n      case SortType.Active:\n        return copyTodos.filter(todo => (\n          todo.title\n            && todo.title.toLowerCase().includes(lowQuery)\n            && !todo.completed\n        ));\n\n      case SortType.Completed:\n        return copyTodos.filter(todo => (\n          todo.title\n            && todo.title.toLowerCase().includes(lowQuery)\n            && todo.completed\n        ));\n\n      case SortType.All:\n        return copyTodos.filter(todo => (\n          todo.title && todo.title.toLowerCase().includes(lowQuery)\n        ));\n\n      default:\n        throw new Error('Some error in sort');\n    }\n  };\n\n  randomize = (array: Todo[]) => {\n    const copy = [...array];\n\n    for (let i = copy.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [copy[i], copy[j]] = [copy[j], copy[i]];\n    }\n\n    return copy;\n  };\n\n  render() {\n    const { query, typeOfSort } = this.state;\n    const { selectUser } = this.props;\n\n    const actualTodos = this.sortedTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form\n          className=\"TodoList__form\"\n          onSubmit={event => {\n            event.preventDefault();\n          }}\n        >\n          <input\n            className=\"TodoList__form-input\"\n            placeholder=\"Search\"\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n          />\n\n          <select\n            className=\"TodoList__form-select\"\n            name=\"typeOfSort\"\n            value={typeOfSort}\n            onChange={this.handleChange}\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Sort by status\n            </option>\n            <option\n              value={SortType.All}\n            >\n              All\n            </option>\n\n            <option\n              value={SortType.Active}\n            >\n              Active\n            </option>\n\n            <option\n              value={SortType.Completed}\n            >\n              Completed\n            </option>\n          </select>\n          <button\n            className=\"TodoList__form-button\"\n            type=\"button\"\n            onClick={() => this.handleClick()}\n          >\n            Random sort\n          </button>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {actualTodos.map(todo => (\n              <li\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadData = async (endpoint: string) => {\n  const response = await fetch(`${API_URL}/${endpoint}`);\n\n  if (!response.ok) {\n    throw new Error('Error of loading');\n  }\n\n  return response.json();\n};\n\nexport const loadTodos = () => {\n  return loadData('todos');\n};\n\nexport const loadUser = (userId: number) => {\n  return loadData(`users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUser } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  clear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { selectedUserId } = this.props;\n\n    if (prevProps.selectedUserId !== selectedUserId) {\n      this.getUser();\n    }\n  }\n\n  getUser = async () => {\n    const { selectedUserId } = this.props;\n\n    const user = await loadUser(selectedUserId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { selectedUserId, clear } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>\n          No user yet\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${selectedUserId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={clear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api/api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n  errorMessage: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getTodos();\n  }\n\n  getTodos = async () => {\n    try {\n      const todos = await loadTodos();\n\n      this.setState({ todos });\n    } catch (error) {\n      this.setState({ errorMessage: 'Error of loading' });\n    }\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { todos, selectedUserId, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage\n            ? (\n              <TodoList\n                todos={todos}\n                selectUser={this.selectUser}\n              />\n            )\n            : (\n              { errorMessage }\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}