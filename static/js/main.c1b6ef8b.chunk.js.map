{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SortType","TodoList","state","query","typeOfSort","All","handleChange","event","target","name","value","setState","sortedTodos","todos","props","lowQuery","toLowerCase","Active","filter","todo","title","includes","completed","Completed","Error","this","selectUser","actualTodos","className","onSubmit","preventDefault","placeholder","type","onChange","disabled","map","classNames","checked","readOnly","onClick","userId","id","React","Component","loadData","endpoint","a","fetch","response","ok","json","loadTodos","loadUser","CurrentUser","user","getUser","selectedUserId","prevProps","clear","email","phone","App","errorMessage","getTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1b6ef8b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nenum SortType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (userId: number) => void;\n};\n\ntype State = {\n  query: string;\n  typeOfSort: SortType;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    typeOfSort: SortType.All,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as { [K in keyof State]: State[K] });\n  };\n\n  sortedTodos = () => {\n    const { query, typeOfSort } = this.state;\n    const { todos } = this.props;\n    const lowQuery = query.toLowerCase();\n\n    switch (typeOfSort) {\n      case SortType.Active:\n        return todos.filter(todo => (\n          todo.title\n            && todo.title.toLowerCase().includes(lowQuery)\n            && !todo.completed\n        ));\n\n      case SortType.Completed:\n        return todos.filter(todo => (\n          todo.title\n            && todo.title.toLowerCase().includes(lowQuery)\n            && todo.completed\n        ));\n\n      case SortType.All:\n        return todos.filter(todo => (\n          todo.title && todo.title.toLowerCase().includes(lowQuery)\n        ));\n\n      default:\n        throw new Error('Some error in sort');\n    }\n  };\n\n  render() {\n    const { query, typeOfSort } = this.state;\n    const { selectUser } = this.props;\n\n    const actualTodos = this.sortedTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form\n          className=\"TodoList__form\"\n          onSubmit={event => {\n            event.preventDefault();\n          }}\n        >\n          <input\n            className=\"TodoList__form-input\"\n            placeholder=\"Search\"\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n          />\n\n          <select\n            className=\"TodoList__form-select\"\n            name=\"typeOfSort\"\n            value={typeOfSort}\n            onChange={this.handleChange}\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Sort by status\n            </option>\n            <option\n              value={SortType.All}\n            >\n              All\n            </option>\n\n            <option\n              value={SortType.Active}\n            >\n              Active\n            </option>\n\n            <option\n              value={SortType.Completed}\n            >\n              Completed\n            </option>\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {actualTodos.map(todo => (\n              <li\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadData = async (endpoint: string) => {\n  const response = await fetch(`${API_URL}/${endpoint}`);\n\n  if (!response.ok) {\n    throw new Error('Error of loading');\n  }\n\n  return response.json();\n};\n\nexport const loadTodos = () => {\n  return loadData('todos');\n};\n\nexport const loadUser = (userId: number) => {\n  return loadData(`users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUser } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  clear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { selectedUserId } = this.props;\n\n    if (prevProps.selectedUserId !== selectedUserId) {\n      this.getUser();\n    }\n  }\n\n  getUser = async () => {\n    const { selectedUserId } = this.props;\n\n    const user = await loadUser(selectedUserId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { selectedUserId, clear } = this.props;\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>\n          No user yet\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${selectedUserId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={clear}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api/api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n  errorMessage: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    this.getTodos();\n  }\n\n  getTodos = async () => {\n    try {\n      const todos = await loadTodos();\n\n      this.setState({ todos });\n    } catch (error) {\n      this.setState({ errorMessage: 'Error of loading' });\n    }\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { todos, selectedUserId, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!errorMessage\n            ? (\n              <TodoList\n                todos={todos}\n                selectUser={this.selectUser}\n              />\n            )\n            : (\n              { errorMessage }\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}